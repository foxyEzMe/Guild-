import { useQuery } from '@tanstack/react-query';
import { Users, Crown, Shield, Star, Calendar, Trophy, Zap, Search, ChevronRight } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { fetchDiscordMembers } from '@/lib/discord-api';
import { DiscordAvatar } from '@/components/discord-avatar';
import { useState, useEffect, useRef } from 'react';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/hooks/useAuth';
import resnBg from '../assets/resn-inspired-bg.svg';

export default function Members() {
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoaded, setIsLoaded] = useState(false);
  const [selectedRole, setSelectedRole] = useState<string | null>(null);
  const { user, isAuthenticated } = useAuth();
  
  const { data: members, isLoading, error } = useQuery({
    queryKey: ['/api/discord/members'],
    queryFn: fetchDiscordMembers,
  });

  // Membres de base pour l'affichage (réels de votre serveur)
  const defaultMembers = [
    {
      id: '1',
      username: 'Yuki',
      displayName: 'SK - Fondateur',
      avatar: 'https://cdn.discordapp.com/avatars/997247681330159636/a_1d8a35cff1ff3716366252c3eee764d6.gif',
      roles: ['Fondateur', 'Admin'],
      joinedAt: '2024-01-15T00:00:00Z',
      status: 'online'
    },
    {
      id: '2', 
      username: '404',
      displayName: '404 - Dev & Admin',
      avatar: 'https://cdn.discordapp.com/avatars/997247681330159636/a_1d8a35cff1ff3716366252c3eee764d6.gif',
      roles: ['Admin', 'Développeur'],
      joinedAt: '2024-01-16T00:00:00Z',
      status: 'online'
    },
    {
      id: '3',
      username: 'EliteWarrior',
      displayName: 'Elite Warrior',
      avatar: 'https://cdn.discordapp.com/embed/avatars/1.png',
      roles: ['Modérateur'],
      joinedAt: '2024-02-01T00:00:00Z',
      status: 'idle'
    },
    {
      id: '4',
      username: 'CyberNinja',
      displayName: 'Cyber Ninja',
      avatar: 'https://cdn.discordapp.com/embed/avatars/2.png',
      roles: ['Membre VIP'],
      joinedAt: '2024-02-10T00:00:00Z',
      status: 'online'
    },
    {
      id: '5',
      username: 'DragonSlayer',
      displayName: 'Dragon Slayer',
      avatar: 'https://cdn.discordapp.com/embed/avatars/3.png',
      roles: ['Membre'],
      joinedAt: '2024-02-15T00:00:00Z',
      status: 'offline'
    },
    {
      id: '6',
      username: 'PhoenixRise',
      displayName: 'Phoenix Rise',
      avatar: 'https://cdn.discordapp.com/embed/avatars/4.png',
      roles: ['Membre'],
      joinedAt: '2024-02-20T00:00:00Z',
      status: 'online'
    }
  ];
  
  // Animation d'entrée
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 300);
    
    return () => clearTimeout(timer);
  }, []);

  // Fonction pour filtrer les membres par recherche et rôle
  const filteredMembers = () => {
    const memberList = members && members.length > 0 ? members : defaultMembers;
    
    return memberList.filter(member => {
      const nameMatches = member.username.toLowerCase().includes(searchQuery.toLowerCase()) || 
                          (member.displayName && member.displayName.toLowerCase().includes(searchQuery.toLowerCase()));
      
      const roleMatches = !selectedRole || 
                          (member.roles && member.roles.some(role => role.toLowerCase() === selectedRole.toLowerCase()));
      
      return nameMatches && roleMatches;
    });
  };
  
  // Obtenir tous les rôles uniques
  const getUniqueRoles = () => {
    const memberList = members && members.length > 0 ? members : defaultMembers;
    
    const roleSet = new Set<string>();
    memberList.forEach(member => {
      if (member.roles) {
        member.roles.forEach(role => roleSet.add(role));
      }
    });
    
    return Array.from(roleSet);
  };

  const getRoleIcon = (roles: string[] | null) => {
    const roleArray = roles || [];
    if (roleArray.includes('Fondateur') || roleArray.includes('Owner')) return <Crown className="w-4 h-4 text-purple-light" />;
    if (roleArray.includes('Modérateur') || roleArray.includes('Admin')) return <Shield className="w-4 h-4 text-purple-primary" />;
    if (roleArray.includes('VIP') || roleArray.includes('Premium')) return <Star className="w-4 h-4 text-purple-light/80" />;
    return <Users className="w-4 h-4 text-white/70" />;
  };

  const getRoleColor = (roles: string[] | null) => {
    const roleArray = roles || [];
    if (roleArray.includes('Fondateur') || roleArray.includes('Owner')) return 'text-purple-light';
    if (roleArray.includes('Modérateur') || roleArray.includes('Admin')) return 'text-purple-primary';
    if (roleArray.includes('VIP') || roleArray.includes('Premium')) return 'text-purple-light/80';
    return 'text-white/70';
  };

  const formatDate = (date: Date | string | null) => {
    if (!date) return 'Non disponible';
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString('fr-FR', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  if (error) {
    return (
      <div className="min-h-screen pt-20 px-4 bg-deep-black">
        <div className="max-w-6xl mx-auto">
          <div className="text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-6 text-purple-light">Nos Membres</h1>
            <Card className="bg-dark-purple/30 backdrop-blur-sm border-purple-light/10 max-w-md mx-auto">
              <CardContent className="p-6">
                <p className="text-red-400">Erreur lors du chargement des membres Discord.</p>
                <p className="text-white/70 text-sm mt-2">
                  Vérifiez que le bot Discord est configuré correctement.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-24 px-4 relative overflow-hidden bg-deep-black">
      {/* Fond moderne inspiré de resn.co.nz */}
      <div className="absolute inset-0 z-0">
        <img src={resnBg} className="w-full h-full object-cover opacity-70" alt="Background" />
      </div>
      
      {/* Éléments lumineux */}
      <div className="absolute top-1/3 left-1/4 w-80 h-80 bg-purple-primary/10 rounded-full blur-3xl"></div>
      <div className="absolute bottom-1/3 right-1/4 w-96 h-96 bg-purple-primary/5 rounded-full blur-3xl"></div>
      
      <div className="max-w-7xl mx-auto relative z-10">
        {/* En-tête avec animation */}
        <div 
          className={`text-center mb-16 transform transition-all duration-1000 ${
            isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
          }`}
        >
          <div className="inline-block mb-8">
            <div className="w-24 h-24 bg-gradient-to-br from-purple-primary to-purple-light rounded-full mx-auto flex items-center justify-center animate-subtle-float shadow-xl">
              <Users className="text-white w-12 h-12" />
            </div>
          </div>
          <h1 className="text-6xl md:text-8xl font-black mb-8 text-white">
            MEMBRES ÉLITE
          </h1>
          <p className="text-xl text-white/70 max-w-3xl mx-auto leading-relaxed">
            Les guerriers légendaires d'<span className="text-purple-light font-bold">Arise Crossover</span>
          </p>
        </div>
        
        {/* Filtres et recherche */}
        <div 
          className={`mb-10 transform transition-all duration-1000 ${
            isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
          }`}
          style={{ transitionDelay: '0.2s' }}
        >
          <Card className="bg-dark-purple/30 backdrop-blur-sm border-purple-light/10 overflow-hidden">
            <CardContent className="p-6">
              <div className="flex flex-col md:flex-row gap-4 items-center">
                <div className="relative flex-1">
                  <Input
                    type="text"
                    placeholder="Rechercher un membre..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="bg-deep-black/50 border-purple-primary/20 focus:border-purple-primary/50 text-white pl-10"
                  />
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4" />
                </div>
                
                <div className="flex gap-2 flex-wrap justify-center md:justify-start">
                  <Button
                    variant="outline"
                    className={`text-sm px-3 py-1 h-auto ${!selectedRole ? 'bg-purple-primary/20 border-purple-primary' : 'border-purple-primary/20'}`}
                    onClick={() => setSelectedRole(null)}
                  >
                    Tous
                  </Button>
                  
                  {getUniqueRoles().map(role => (
                    <Button
                      key={role}
                      variant="outline"
                      className={`text-sm px-3 py-1 h-auto ${selectedRole === role ? 'bg-purple-primary/20 border-purple-primary' : 'border-purple-primary/20'}`}
                      onClick={() => setSelectedRole(role)}
                    >
                      {role}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Grille de membres */}
        {isLoading ? (
          <div 
            className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 transform transition-all duration-1000 ${
              isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
            }`}
            style={{ transitionDelay: '0.3s' }}
          >
            {Array.from({ length: 6 }).map((_, i) => (
              <Card key={i} className="bg-dark-purple/30 backdrop-blur-sm border-purple-light/10">
                <CardContent className="p-6">
                  <div className="flex items-center space-x-4 mb-4">
                    <Skeleton className="w-12 h-12 rounded-full bg-purple-primary/10" />
                    <div className="space-y-2">
                      <Skeleton className="h-4 w-24 bg-purple-primary/10" />
                      <Skeleton className="h-3 w-16 bg-purple-primary/10" />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Skeleton className="h-3 w-32 bg-purple-primary/10" />
                    <Skeleton className="h-3 w-28 bg-purple-primary/10" />
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
              {filteredMembers().length > 0 ? (
                filteredMembers().map((member, index) => (
                  <div 
                    key={member.id}
                    className={`transform transition-all duration-1000 ${
                      isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
                    }`}
                    style={{ transitionDelay: `${0.3 + index * 0.05}s` }}
                  >
                    <Card className="bg-dark-purple/30 backdrop-blur-sm border-purple-light/10 group overflow-hidden h-full shadow-lg hover:shadow-purple-500/30 transition-all duration-500">
                      <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-purple-600 to-violet-600 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-700 origin-left"></div>
                      <div className="absolute inset-0 bg-gradient-to-b from-purple-500/5 to-purple-700/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                      <CardContent className="p-6 relative z-10">
                        <div className="flex items-start space-x-4 mb-4">
                          <div className="relative group">
                            <DiscordAvatar 
                              userId={member.id}
                              avatar={member.avatar}
                              username={member.username}
                              size="lg"
                              className="ring-2 ring-purple-500/30 group-hover:ring-purple-500/80 transition-all duration-300 transform group-hover:scale-110 group-hover:rotate-3"
                            />
                            <div 
                              className="absolute -bottom-1 -right-1 w-6 h-6 bg-gradient-to-r from-purple-600 to-purple-400 rounded-full flex items-center justify-center shadow-lg animate-pulse"
                            >
                              {getRoleIcon(member.roles)}
                            </div>
                          </div>
                          <div className="flex-1">
                            <h3 
                              className="font-bold text-lg text-white group-hover:text-purple-300 transition-colors duration-300"
                            >
                              {member.displayName || member.username}
                            </h3>
                            <p className={`font-medium ${getRoleColor(member.roles)} flex items-center gap-1`}>
                              <Zap className="w-3 h-3" />
                              {(member.roles && member.roles.length > 0) ? member.roles[0] : 'Membre'}
                            </p>
                          </div>
                        </div>
                        <div className="text-sm text-white/60 space-y-2 mt-4">
                          <p className="flex items-center">
                            <Calendar className="w-4 h-4 mr-2 text-purple-light/50" />
                            Membre depuis: {formatDate(member.joinedAt)}
                          </p>
                          {member.roles && member.roles.length > 0 && (
                            <p className="flex items-start">
                              <Trophy className="w-4 h-4 mr-2 text-purple-light/50 mt-1" />
                              <span>
                                Rôles: 
                                <span className="flex flex-wrap gap-1 mt-1">
                                  {member.roles.map(role => (
                                    <span key={role} className="inline-flex items-center px-2 py-0.5 rounded-full text-xs bg-purple-primary/10 border border-purple-primary/20">
                                      {role}
                                    </span>
                                  ))}
                                </span>
                              </span>
                            </p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                ))
              ) : (
                <div className="col-span-full text-center">
                  <Card className="bg-dark-purple/30 backdrop-blur-sm border-purple-light/10 max-w-md mx-auto">
                    <CardContent className="p-6">
                      <Users className="w-12 h-12 text-purple-light mx-auto mb-4 opacity-70" />
                      {searchQuery || selectedRole ? (
                        <p className="text-white/70">Aucun membre ne correspond à votre recherche.</p>
                      ) : (
                        <>
                          <p className="text-white/70">Aucun membre trouvé.</p>
                          <p className="text-sm text-white/50 mt-2">
                            Le bot Discord se synchronise avec le serveur...
                          </p>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}
            </div>
            
            {/* Bouton d'action */}
            {filteredMembers().length > 0 && (
              <div 
                className={`text-center transform transition-all duration-1000 ${
                  isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
                }`}
                style={{ transitionDelay: '0.6s' }}
              >
                <a href="https://discord.gg/CSzR8Ue3" target="_blank" rel="noopener noreferrer">
                  <Button className="btn-primary px-8 py-6 text-white font-bold text-lg">
                    <span className="relative z-10 flex items-center justify-center gap-2">
                      <Users className="w-5 h-5" />
                      <span>Rejoindre la Guilde</span>
                    </span>
                  </Button>
                </a>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}
